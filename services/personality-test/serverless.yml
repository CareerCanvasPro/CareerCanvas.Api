service: careercanvas-personality-test

plugins:
  - serverless-plugin-typescript
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:AWS_REGION}
  stage: ${env:STAGE, 'prod'}
  memorySize: 256
  timeout: 10
  environment:
    DYNAMODB_TTL_CACHE: 300
    TESTS_TABLE: ${self:service}-tests-${self:provider.stage}
    RESULTS_TABLE: ${self:service}-results-${self:provider.stage}
    QUESTIONS_TABLE: ${self:service}-questions-${self:provider.stage}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - !GetAtt TestsTable.Arn
            - !GetAtt ResultsTable.Arn
            - !GetAtt QuestionsTable.Arn
            - !Join ['/', [!GetAtt TestsTable.Arn, 'index/*']]
            - !Join ['/', [!GetAtt ResultsTable.Arn, 'index/*']]
            - !Join ['/', [!GetAtt QuestionsTable.Arn, 'index/*']]

resources:
  Resources:
    TestsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TESTS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: type
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: type-index
            KeySchema:
              - AttributeName: type
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    ResultsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.RESULTS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: testId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: user-results-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: test-results-index
            KeySchema:
              - AttributeName: testId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    QuestionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.QUESTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: testId
            AttributeType: S
          - AttributeName: category
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: test-questions-index
            KeySchema:
              - AttributeName: testId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: category-index
            KeySchema:
              - AttributeName: category
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST