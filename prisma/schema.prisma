generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ENUMS

enum Category {
  EI
  SN
  TF
  JP
}

enum Currency {
  BDT
  USD
}

enum Language {
  BANGLA  @map("Bangla")
  ENGLISH @map("English")
}

enum Level {
  BEGINNER     @map("Beginner")
  INTERMEDIATE @map("Intermediate")
  EXPERT       @map("Expert")
}

enum LocationType {
  HYBRID  @map("Hybrid")
  ON_SITE @map("On-site")
  REMOTE  @map("Remote")
}

enum PersonalityTestStatus {
  COMPLETE @map("Complete")
  PENDING  @map("Pending")
}

enum PersonalityType {
  INTJ
  INTP
  ENTJ
  ENTP
  INFJ
  INFP
  ENFJ
  ENFP
  ISTJ
  ISFJ
  ESTJ
  ESFJ
  ISTP
  ISFP
  ESTP
  ESFP
}

enum SalaryInterval {
  ANNUM @map("Annum")
  MONTH @map("Month")
}

enum Type {
  CONTRACTUAL @map("Contractual")
  FULL_TIME   @map("Full-time")
  INTERN      @map("Intern")
  PART_TIME   @map("Part-time")
}

/// COMMON SCHEMA

model Author {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]
}

model Field {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]
  jobs    Job[]
  users   User[]
}

model Goal {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]
  jobs    Job[]
  users   User[]
}

model Skill {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

/// COURSE SCHEMA

model Course {
  id           String   @id @default(cuid())
  currency     Currency
  duration     Int
  image        String
  level        Level
  name         String
  price        Decimal
  rating       Decimal
  ratingCount  Int
  sourceName   String
  sourceUrl    String
  studentCount Int
  authors      Author[]
  goals        Goal[]
  topic        Field    @relation(fields: [topicId], references: [id])
  topicId      String
}

/// JOB SCHEMA

model Job {
  id               String            @id @default(cuid())
  companyLogo      String
  currency         Currency
  deadline         BigInt
  location         String
  locationType     LocationType
  organization     String
  personalityTypes PersonalityType[]
  position         String
  salary           Int
  salaryInterval   SalaryInterval
  salaryMax        Int?
  type             Type
  fields           Field[]
  goals            Goal[]
}

/// PERSONALITY TEST SCHEMA

model PersonalityTestAnswer {
  id         String                  @id @default(cuid())
  answer     Int
  question   PersonalityTestQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId String
  userId     String

  @@unique([questionId, userId])
}

model PersonalityTestQuestion {
  id       String                  @id @default(cuid())
  category Category
  question String
  score    Int
  answers  PersonalityTestAnswer[]
}

/// USER SCHEMA

model User {
  id                      String                  @id @default(cuid())
  aboutMe                 String?
  address                 String?
  email                   String?                 @unique
  fcmToken                String?                 @unique
  languages               Language[]
  name                    String?
  personalityTestResultEI Float?
  personalityTestResultSN Float?
  personalityTestResultTF Float?
  personalityTestResultJP Float?
  personalityTestStatus   PersonalityTestStatus?
  personalityType         PersonalityType?
  phone                   String?                 @unique
  profilePicture          String?
  username                String                  @unique
  answers                 PersonalityTestAnswer[]
  appreciations           Appreciation[]
  educations              Education[]
  goals                   Goal[]
  interests               Field[]
  occupations             Occupation[]
  resumes                 Resume[]
  skills                  Skill[]
}

model Appreciation {
  id           String  @id @default(cuid())
  date         BigInt?
  name         String?
  organization String?
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model Education {
  id                    String  @id @default(cuid())
  achievements          String?
  certificateName       String?
  certificateSize       Int?
  certificateType       String?
  certificateUploadedAt BigInt?
  certificateUrl        String?
  field                 String?
  graduationDate        BigInt?
  institute             String?
  isCurrent             Boolean @default(false)
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
}

model Occupation {
  id           String  @id @default(cuid())
  designation  String?
  endDate      BigInt?
  isCurrent    Boolean @default(false)
  organization String?
  startDate    BigInt?
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model Resume {
  id         String @id @default(cuid())
  name       String
  size       Int
  type       String
  uploadedAt BigInt
  url        String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
}
